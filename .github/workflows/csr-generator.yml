name: Generate CSR and Create Secret In OpenShift
on:
  workflow_call:
    secrets:
      oc_token:
        description: 'OpenShift token'
        required: true
      oc_namespace:
        description: 'OpenShift namespace'
        required: true

    inputs:
      domain:
        description: 'Domain name for certificate'
        required: true
        type: string
      existing_private_key:
        description: 'Existing private key'
        required: false
        default: ''
        type: string
      oc_server:
        description: 'OpenShift server'
        required: true
        type: string

  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain name for certificate'
        required: true
        type: string
      existing_private_key:
        description: 'Existing private key'
        required: false
        default: ''
        type: string
      oc_token:
        description: 'OpenShift token'
        required: true
        type: string
      oc_namespace:
        description: 'OpenShift namespace'
        required: true
        type: string
      oc_server:
        description: 'OpenShift server'
        required: true
        type: string

permissions: {}

jobs:
  generate-csr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Make script executable
        run: chmod +x ./cert-setup/csr_generator.sh

      - name: Generate CSR
        id: generate-csr
        run: |
          # Set up command arguments based on inputs
          CMD_ARGS=""
          
          # Add domain name
          CMD_ARGS="${CMD_ARGS} ${{ inputs.domain }}"
          # Add private key if provided
          if [[ "${{ inputs.existing_private_key }}" != "" ]]; then
            # Mask the private key in logs
            echo "::add-mask::${{ inputs.existing_private_key }}"
            # Create a temporary file for the private key with secure permissions
            echo "${{ inputs.existing_private_key }}" > private_key.pem
            chmod 600 private_key.pem
            CMD_ARGS="${CMD_ARGS} private_key.pem"
          fi
            
          # Run the CSR generator script
          ./cert-setup/csr_generator.sh ${CMD_ARGS}
          
          # Read CSR file content and set as environment variable
          if [ -f "${{ inputs.domain }}.csr" ]; then
            # Use multi-line syntax for environment variables
            echo "CSR_CONTENT<<EOF" >> $GITHUB_ENV
            cat "${{ inputs.domain }}.csr" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

          else
            echo "Error: CSR file not found"
            exit 1
          fi
            
          # Read KEY file content if it exists and set as environment variable
          if [ -f "${{ inputs.domain }}.key" ]; then
          # Set flag indicating key was generated
          echo "KEY_GENERATED=true" >> $GITHUB_ENV
          
          # Use a safer approach for multiline content with masking
          echo "KEY_CONTENT<<EOF" >> $GITHUB_ENV
          cat "${{ inputs.domain }}.key" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Mask each line of the key separately to ensure proper masking
          while IFS= read -r line; do
            [[ -n "$line" ]] && echo "::add-mask::$line"
          done < "${{ inputs.domain }}.key"
          else
          echo "KEY_GENERATED=false" >> $GITHUB_ENV
          fi
      
      - name: Create or update CSR secret in OpenShift
        uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd # v1.2.3
        env:
          OC_TOKEN: ${{ inputs.oc_token || secrets.oc_token }} 
          OC_SERVER: ${{ inputs.oc_server }}
          OC_NAMESPACE: ${{ inputs.oc_namespace || secrets.oc_namespace }}
          CSR_CONTENT: |
            ${{ env.CSR_CONTENT }}
          KEY_CONTENT: |
            ${{ env.KEY_CONTENT }}
          KEY_GENERATED: ${{ env.KEY_GENERATED }}
        with:
          oc_namespace: ${{ env.OC_NAMESPACE }}
          oc_token: ${{ env.OC_TOKEN }}
          oc_server: ${{ env.OC_SERVER }}
          commands: |
            # Check if CSR secret exists and delete if it does
            if oc get secret ${{ inputs.domain }}-csr &>/dev/null; then
              echo "Existing CSR secret found, replacing it..."
              oc delete secret ${{ inputs.domain }}-csr
            fi
            
            # Create secret for CSR directly from environment variable
            oc create secret generic ${{ inputs.domain }}-csr \
              --from-literal=csr="${CSR_CONTENT}" \
              -o yaml | oc apply -f -
            
            # Handle private key secret if generated
            if [ "$KEY_GENERATED" == "true" ]; then
              # Check if key secret exists and delete if it does
              if oc get secret ${{ inputs.domain }}-key &>/dev/null; then
                echo "Existing key secret found, replacing it..."
                oc delete secret ${{ inputs.domain }}-key
              fi
              
              oc create secret generic ${{ inputs.domain }}-key \
                --from-literal=key="${KEY_CONTENT}" \
                -o yaml | oc apply -f -
            
              echo "Created or updated secrets for both CSR and private key"
            else
              echo "Created or updated secret for CSR only (used existing private key)"
            fi
