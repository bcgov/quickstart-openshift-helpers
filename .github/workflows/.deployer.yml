name: .Helm Deployer

on:
  workflow_call:
    inputs:
      ### Required
      # Only secrets!

      ### Typical / recommended
      directory:
        description: Chart directory
        default:  'charts/app'
        required: false
        type: string
      environment:
        description: Environment name; omit for PRs
        required: false
        type: string
      oc_server:
        default: https://api.silver.devops.gov.bc.ca:6443
        description: 'OpenShift server'
        required: false
        type: string
      params:
        description: 'Extra parameters to pass to helm upgrade'
        default: ''
        required: false
        type: string
      tag:
        description: Specify a tag to deploy; defaults to PR number
        required: false
        type: string
      triggers:
        description: Paths used to trigger a deployment; e.g. ('./backend/' './frontend/)
        required: false
        type: string

      ### Usually a bad idea / not recommended
      timeout-minutes:
        description: 'Timeout minutes'
        default: 10
        required: false
        type: number
      values:
        description: 'Values file'
        default: 'values.yaml'
        required: false
        type: string

    outputs:
      triggered:
        description: 'Has a deployment has been triggered?'
        value: ${{ jobs.deployer.outputs.triggered }}

    secrets:
      oc_namespace:
        description: OpenShift namespace
        required: true
      oc_token:
        description: OpenShift token
        required: true

jobs:
  deployer:
    name: Helm
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.triggers.outputs.triggered }}
    steps:
    ### Triggers, tags and early exits

    # Check triggers (omitted or matched), exiting successfully if not fired/required
    - uses: bcgov-nr/action-diff-triggers@v0.2.0
      id: triggers
      with:
        triggers: ${{ inputs.triggers }}
    - if: steps.triggers.outputs.triggered == 'false'
      run: |
        echo "No deployment required/triggered!"
        exit 0

    # Variables
    - id: pr
      uses: bcgov-nr/action-get-pr@v0.0.1
    - id: vars
      run: |
        # Vars: tag and release

        # Tag defaults to PR number, but can be overridden by inputs.tag
        tag=${{ inputs.tag || steps.pr.outputs.pr }}

        # Release name includes run numbers to ensure uniqueness
        release=${{ github.event.repository.name }}-${{ inputs.environment || steps.pr.outputs.pr }}

        # Summary
        echo "tag=${tag}"
        echo "release=${release}"

        # Output
        echo "tag=${tag}" >> $GITHUB_OUTPUT
        echo "release=${release}" >> $GITHUB_OUTPUT

    ### Deploy

    # OC Login
    - run: |
        # OC Login
        oc login --token=${{ secrets.oc_token }} --server=${{ inputs.oc_server }}
        oc project ${{ secrets.oc_namespace }} # Safeguard!

    # Only stop pre-existing deployments on PRs
    - if: github.event_name == 'pull_request'
      run: |
        # Interrupt any previous PR deployments (status = pending-upgrade)
        PREVIOUS=$(helm status ${{ steps.vars.outputs.release }} -o json | jq .info.status || true)
        if [[ ${PREVIOUS} =~ pending ]]; then
          echo "Rollback triggered"
          helm rollback ${{ steps.vars.outputs.release }} || \
            helm uninstall ${{ steps.vars.outputs.release }}
        fi

    # Package Helm chart
    - uses: actions/checkout@v4
    - working-directory: ${{ inputs.directory }}
      run: |
        # Package Helm chart using release name
        sed -i 's/^name:.*/name: ${{ github.event.repository.name }}/' Chart.yaml
        helm package -u . --app-version="tag-${{ steps.vars.outputs.tag }}_run-${{ github.run_number }}" --version=${{ steps.pr.outputs.pr }}

    # Deploy Helm chart
    - working-directory: ${{ inputs.directory }}
      run: |
        # Deploy Helm chart
        helm upgrade \
          --set-string global.repository=${{ github.repository }} \
          --set-string global.tag=${{ steps.vars.outputs.tag }} \
          ${{ inputs.params }} \
          --install --wait --atomic ${{ steps.vars.outputs.release }} \
          --timeout ${{ inputs.timeout-minutes }}m \
          --values ${{ inputs.values }} \
          ./${{ github.event.repository.name }}-${{ steps.pr.outputs.pr }}.tgz

    # Helm release history
    - run: |
        # Helm release history
        helm history ${{ steps.vars.outputs.release }}

    ### Cleanup

    # Completed pod cleanup
    - run: |
        # Expand for succeeded pod cleanup (optional)
        oc delete po --field-selector=status.phase==Succeeded || true
